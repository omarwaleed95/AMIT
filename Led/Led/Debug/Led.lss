
Led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b8  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000589  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d9  00000000  00000000  00000f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000306  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023a  00000000  00000000  0000152e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main()
{
	CLEAR_BIT(DDRB,0);
  6c:	b8 98       	cbi	0x17, 0	; 23
	CLEAR_BIT(DDRB,4);
  6e:	bc 98       	cbi	0x17, 4	; 23
	CLEAR_BIT(DDRD,2);
  70:	8a 98       	cbi	0x11, 2	; 17
	SET_BIT(DDRC,2);
  72:	a2 9a       	sbi	0x14, 2	; 20
	SET_BIT(DDRC,7);
  74:	a7 9a       	sbi	0x14, 7	; 20
	SET_BIT(DDRD,3);
  76:	8b 9a       	sbi	0x11, 3	; 17
	DDRC |=(1<<7); //set bit (output)
	DDRD |=(1<<3); //set bit (output)*/
    while (1) 
    {
		//if(((PINB>>0)&1) == 1){
			if (GET_BIT(PINB,0)==1) {
  78:	b0 9b       	sbis	0x16, 0	; 22
  7a:	0e c0       	rjmp	.+28     	; 0x98 <main+0x2c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	8f ed       	ldi	r24, 0xDF	; 223
  7e:	9e e2       	ldi	r25, 0x2E	; 46
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <main+0x14>
  84:	00 c0       	rjmp	.+0      	; 0x86 <main+0x1a>
  86:	00 00       	nop
			_delay_ms(30);
		//	PORTC |=(1<<2);
		     SET_BIT(PORTC,2);
  88:	aa 9a       	sbi	0x15, 2	; 21
  8a:	8f e3       	ldi	r24, 0x3F	; 63
  8c:	9c e9       	ldi	r25, 0x9C	; 156
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <main+0x22>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
  96:	07 c0       	rjmp	.+14     	; 0xa6 <main+0x3a>
			_delay_ms(100);
		}
		else{
		//PORTC &=~(1<<2);
		CLEAR_BIT(PORTC,2);
  98:	aa 98       	cbi	0x15, 2	; 21
  9a:	8f e3       	ldi	r24, 0x3F	; 63
  9c:	9c e9       	ldi	r25, 0x9C	; 156
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x32>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
		_delay_ms(100);
		}
		//if(((PINB>>4)&1) == 1){
			if(GET_BIT(PINB,4)==1){
  a6:	b4 9b       	sbis	0x16, 4	; 22
  a8:	0e c0       	rjmp	.+28     	; 0xc6 <main+0x5a>
  aa:	8f ed       	ldi	r24, 0xDF	; 223
  ac:	9e e2       	ldi	r25, 0x2E	; 46
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x42>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x48>
  b4:	00 00       	nop
			_delay_ms(30);
			//PORTC |=(1<<7);
			SET_BIT(PORTC,7);
  b6:	af 9a       	sbi	0x15, 7	; 21
  b8:	8f e3       	ldi	r24, 0x3F	; 63
  ba:	9c e9       	ldi	r25, 0x9C	; 156
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x50>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x56>
  c2:	00 00       	nop
  c4:	07 c0       	rjmp	.+14     	; 0xd4 <main+0x68>
			_delay_ms(100);	
    }
	else{
		//PORTC &=~(1<<7);
		CLEAR_BIT(PORTC,7);
  c6:	af 98       	cbi	0x15, 7	; 21
  c8:	8f e3       	ldi	r24, 0x3F	; 63
  ca:	9c e9       	ldi	r25, 0x9C	; 156
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x60>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x66>
  d2:	00 00       	nop
		_delay_ms(100);
	}
	 //if(((PIND>>2)&1) == 1){
		 if(GET_BIT(PIND,2)==1){
  d4:	82 9b       	sbis	0x10, 2	; 16
  d6:	0e c0       	rjmp	.+28     	; 0xf4 <main+0x88>
  d8:	8f ed       	ldi	r24, 0xDF	; 223
  da:	9e e2       	ldi	r25, 0x2E	; 46
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x70>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x76>
  e2:	00 00       	nop
		_delay_ms(30);
		//PORTD |=(1<<3);
		SET_BIT(PORTD,3);
  e4:	93 9a       	sbi	0x12, 3	; 18
  e6:	8f e3       	ldi	r24, 0x3F	; 63
  e8:	9c e9       	ldi	r25, 0x9C	; 156
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x7e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x84>
  f0:	00 00       	nop
  f2:	c2 cf       	rjmp	.-124    	; 0x78 <main+0xc>
		_delay_ms(100);
	}
	else{
		//PORTD &=~(1<<3);
		CLEAR_BIT(PORTD,3);
  f4:	93 98       	cbi	0x12, 3	; 18
  f6:	8f e3       	ldi	r24, 0x3F	; 63
  f8:	9c e9       	ldi	r25, 0x9C	; 156
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x8e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x94>
 100:	00 00       	nop
 102:	ba cf       	rjmp	.-140    	; 0x78 <main+0xc>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
